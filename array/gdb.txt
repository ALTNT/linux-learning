Reading symbols from array...
(No debugging symbols found in array)
Reading symbols from array...
Breakpoint 1 at 0x40117a: file array.cpp, line 5.
Starting program: /home/wujing/code/cpp-learning/array/array 

Breakpoint 1, main () at array.cpp:5
5	    int a[2][3] = {1, 2, 3, 4, 5, '\0'};
6	    cout << a << endl;
$1 = 24
$2 = 4
$3 = {
  [0] = {
    [0] = 1,
    [1] = 2,
    [2] = 3
  },
  [1] = {
    [0] = 4,
    [1] = 5,
    [2] = 0
  }
}
$4 = (int (*)[2][3]) 0x7fffffffc620
$5 = {
  [0] = {
    [0] = 1,
    [1] = 2,
    [2] = 3
  },
  [1] = {
    [0] = 4,
    [1] = 5,
    [2] = 0
  }
}
$6 = {
  [0] = 1,
  [1] = 2,
  [2] = 3
}
$7 = {
  [0] = 4,
  [1] = 5,
  [2] = 0
}
Reading symbols from array...
Breakpoint 1 at 0x40118a: file array.cpp, line 5.
Starting program: /home/wujing/code/cpp-learning/array/array 

Breakpoint 1, main () at array.cpp:5
5	    int a[6] = {1, 2, 3, 4, 5, '\0'};
6	    cout << a << endl;
Reading symbols from array...
Breakpoint 1 at 0x40118a: file array.cpp, line 5.
Starting program: /home/wujing/code/cpp-learning/array/array 

Breakpoint 1, main () at array.cpp:5
5	    int a[6] = {1, 2, 3, 4, 5, '\0'};
6	    cout << a << endl;
No symbol "p" in current context.
$1 = {
  [0] = 1,
  [1] = 2,
  [2] = 3,
  [3] = 4,
  [4] = 5,
  [5] = 0
}
$2 = (int (*)[6]) 0x7fffffffca50
$3 = (int *) 0x7fffffffca50
$4 = 1
$5 = 2
$6 = 3
$7 = 0
$8 = 5
$9 = 1
$10 = 11
$11 = 51
$12 = {
  [0] = 1,
  [1] = 2,
  [2] = 3,
  [3] = 4,
  [4] = 5,
  [5] = 0
}
$13 = (int (*)[6]) 0x7fffffffca50
$14 = 1
$15 = 2
Reading symbols from array2...
Breakpoint 1 at 0x40117a: file array2.cpp, line 5.
Starting program: /home/wujing/code/cpp-learning/array/array2 

Breakpoint 1, main () at array2.cpp:5
5	    int a[2][3] = {1, 2, 3, 4, 5, '\0'};
$1 = {
  [0] = {
    [0] = 4199008,
    [1] = 0,
    [2] = 4198544
  },
  [1] = {
    [0] = 0,
    [1] = -13488,
    [2] = 32767
  }
}
$2 = (int (*)[2][3]) 0x7fffffffca50
$3 = (int (*)[3]) 0x7fffffffca50
$4 = (int *) 0x7fffffffca50
Attempt to take address of value not located in memory.
$5 = (int (*)[3]) 0x7fffffffca5c
$6 = (int *) 0x7fffffffca5c
$7 = {
  [0] = 0,
  [1] = -13488,
  [2] = 32767
}
$8 = (int *) 0x7fffffffca60
$9 = -13488
$10 = (int (*)[3]) 0x7fffffffca68
$11 = {
  [0] = 0,
  [1] = 0,
  [2] = 4199008
}
Reading symbols from array2...
Breakpoint 1 at 0x40117a: file array2.cpp, line 5.
Starting program: /home/wujing/code/cpp-learning/array/array2 

Breakpoint 1, main () at array2.cpp:5
5	    int a[2][3] = {1, 2, 3, 4, 5, '\0'};
$1 = {
  [0] = {
    [0] = 4199008,
    [1] = 0,
    [2] = 4198544
  },
  [1] = {
    [0] = 0,
    [1] = -13488,
    [2] = 32767
  }
}
$2 = (int (*)[2][3]) 0x7fffffffca50
$3 = (int (*)[3]) 0x7fffffffca68
$4 = {
  [0] = 0,
  [1] = 0,
  [2] = 4199008
}
$5 = (int (*)[3]) 0x7fffffffca5c
$6 = {
  [0] = 0,
  [1] = -13488,
  [2] = 32767
}
$7 = {
  [0] = 0,
  [1] = -13488,
  [2] = 32767
}
$8 = {
  [0] = {
    [0] = 4199008,
    [1] = 0,
    [2] = 4198544
  },
  [1] = {
    [0] = 0,
    [1] = -13488,
    [2] = 32767
  }
}
6	    cout << a << endl;
$9 = {
  [0] = {
    [0] = 1,
    [1] = 2,
    [2] = 3
  },
  [1] = {
    [0] = 4,
    [1] = 5,
    [2] = 0
  }
}
$10 = (int (*)[3]) 0x7fffffffca5c
$11 = {
  [0] = 4,
  [1] = 5,
  [2] = 0
}
$12 = {
  [0] = 0,
  [1] = 0,
  [2] = 4199008
}
$13 = (int *) 0x7fffffffca60
$14 = (int *) 0x7fffffffca68
$15 = (int (*)[3]) 0x7fffffffca5c
$16 = (int (*)[3]) 0x7fffffffca68
$17 = (int (*)[3]) 0x7fffffffca74
1	#include <iostream>
2	using namespace std;
3	int main()
4	{
5	    int a[2][3] = {1, 2, 3, 4, 5, '\0'};
6	    cout << a << endl;
7	    cout << &a << endl;
8	    cout << *a << endl;
9	    return 0;
10	}
#0  main () at array2.cpp:6
$18 = {
  [0] = {
    [0] = 1,
    [1] = 2,
    [2] = 3
  },
  [1] = {
    [0] = 4,
    [1] = 5,
    [2] = 0
  }
}
$19 = (int (*)[2][3]) 0x7fffffffca50
$20 = {
  [0] = 1,
  [1] = 2,
  [2] = 3
}
$21 = {
  [0] = 4,
  [1] = 5,
  [2] = 0
}
$22 = (int *) 0x7fffffffca54
$23 = 5
$24 = (int (*)[3]) 0x7fffffffca5c
$25 = {
  [0] = 4,
  [1] = 5,
  [2] = 0
}
$26 = {
  [0] = 4,
  [1] = 5,
  [2] = 0
}
$27 = 0
$28 = {
  [0] = {
    [0] = 1,
    [1] = 2,
    [2] = 3
  },
  [1] = {
    [0] = 4,
    [1] = 5,
    [2] = 0
  }
}
$29 = {
  [0] = 1,
  [1] = 2,
  [2] = 3
}
$30 = (int (*)[2][3]) 0x7fffffffca50
$31 = {
  [0] = 1,
  [1] = 2,
  [2] = 3
}
$32 = 1
$33 = 1
$34 = {
  [0] = 1,
  [1] = 2,
  [2] = 3
}
$35 = {
  [0] = {
    [0] = 1,
    [1] = 2,
    [2] = 3
  },
  [1] = {
    [0] = 4,
    [1] = 5,
    [2] = 0
  }
}
$36 = (int (*)[2][3]) 0x7fffffffca50
$37 = {
  [0] = {
    [0] = 1,
    [1] = 2,
    [2] = 3
  },
  [1] = {
    [0] = 4,
    [1] = 5,
    [2] = 0
  }
}
$38 = 1
$39 = 2
Dump of assembler code for function main():
   0x0000000000401172 <+0>:	push   %rbp
   0x0000000000401173 <+1>:	mov    %rsp,%rbp
   0x0000000000401176 <+4>:	sub    $0x20,%rsp
   0x000000000040117a <+8>:	movl   $0x1,-0x20(%rbp)
   0x0000000000401181 <+15>:	movl   $0x2,-0x1c(%rbp)
   0x0000000000401188 <+22>:	movl   $0x3,-0x18(%rbp)
   0x000000000040118f <+29>:	movl   $0x4,-0x14(%rbp)
   0x0000000000401196 <+36>:	movl   $0x5,-0x10(%rbp)
   0x000000000040119d <+43>:	movl   $0x0,-0xc(%rbp)
=> 0x00000000004011a4 <+50>:	lea    -0x20(%rbp),%rax
   0x00000000004011a8 <+54>:	mov    %rax,%rsi
   0x00000000004011ab <+57>:	mov    $0x404060,%edi
   0x00000000004011b0 <+62>:	call   0x401040 <_ZNSolsEPKv@plt>
   0x00000000004011b5 <+67>:	mov    $0x401030,%esi
   0x00000000004011ba <+72>:	mov    %rax,%rdi
   0x00000000004011bd <+75>:	call   0x401060 <_ZNSolsEPFRSoS_E@plt>
   0x00000000004011c2 <+80>:	lea    -0x20(%rbp),%rax
   0x00000000004011c6 <+84>:	mov    %rax,%rsi
   0x00000000004011c9 <+87>:	mov    $0x404060,%edi
   0x00000000004011ce <+92>:	call   0x401040 <_ZNSolsEPKv@plt>
   0x00000000004011d3 <+97>:	mov    $0x401030,%esi
   0x00000000004011d8 <+102>:	mov    %rax,%rdi
   0x00000000004011db <+105>:	call   0x401060 <_ZNSolsEPFRSoS_E@plt>
   0x00000000004011e0 <+110>:	lea    -0x20(%rbp),%rax
   0x00000000004011e4 <+114>:	mov    %rax,%rsi
   0x00000000004011e7 <+117>:	mov    $0x404060,%edi
   0x00000000004011ec <+122>:	call   0x401040 <_ZNSolsEPKv@plt>
   0x00000000004011f1 <+127>:	mov    $0x401030,%esi
   0x00000000004011f6 <+132>:	mov    %rax,%rdi
   0x00000000004011f9 <+135>:	call   0x401060 <_ZNSolsEPFRSoS_E@plt>
   0x00000000004011fe <+140>:	mov    $0x0,%eax
   0x0000000000401203 <+145>:	leave  
   0x0000000000401204 <+146>:	ret    
End of assembler dump.
Undefined command: "whre".  Try "help".
#0  main () at array2.cpp:6
Dump of assembler code for function main():
   0x0000000000401172 <+0>:	push   %rbp
   0x0000000000401173 <+1>:	mov    %rsp,%rbp
   0x0000000000401176 <+4>:	sub    $0x20,%rsp
   0x000000000040117a <+8>:	movl   $0x1,-0x20(%rbp)
   0x0000000000401181 <+15>:	movl   $0x2,-0x1c(%rbp)
   0x0000000000401188 <+22>:	movl   $0x3,-0x18(%rbp)
   0x000000000040118f <+29>:	movl   $0x4,-0x14(%rbp)
   0x0000000000401196 <+36>:	movl   $0x5,-0x10(%rbp)
   0x000000000040119d <+43>:	movl   $0x0,-0xc(%rbp)
=> 0x00000000004011a4 <+50>:	lea    -0x20(%rbp),%rax
   0x00000000004011a8 <+54>:	mov    %rax,%rsi
   0x00000000004011ab <+57>:	mov    $0x404060,%edi
   0x00000000004011b0 <+62>:	call   0x401040 <_ZNSolsEPKv@plt>
   0x00000000004011b5 <+67>:	mov    $0x401030,%esi
   0x00000000004011ba <+72>:	mov    %rax,%rdi
   0x00000000004011bd <+75>:	call   0x401060 <_ZNSolsEPFRSoS_E@plt>
   0x00000000004011c2 <+80>:	lea    -0x20(%rbp),%rax
   0x00000000004011c6 <+84>:	mov    %rax,%rsi
   0x00000000004011c9 <+87>:	mov    $0x404060,%edi
   0x00000000004011ce <+92>:	call   0x401040 <_ZNSolsEPKv@plt>
   0x00000000004011d3 <+97>:	mov    $0x401030,%esi
   0x00000000004011d8 <+102>:	mov    %rax,%rdi
   0x00000000004011db <+105>:	call   0x401060 <_ZNSolsEPFRSoS_E@plt>
   0x00000000004011e0 <+110>:	lea    -0x20(%rbp),%rax
   0x00000000004011e4 <+114>:	mov    %rax,%rsi
   0x00000000004011e7 <+117>:	mov    $0x404060,%edi
   0x00000000004011ec <+122>:	call   0x401040 <_ZNSolsEPKv@plt>
   0x00000000004011f1 <+127>:	mov    $0x401030,%esi
   0x00000000004011f6 <+132>:	mov    %rax,%rdi
   0x00000000004011f9 <+135>:	call   0x401060 <_ZNSolsEPFRSoS_E@plt>
   0x00000000004011fe <+140>:	mov    $0x0,%eax
   0x0000000000401203 <+145>:	leave  
   0x0000000000401204 <+146>:	ret    
End of assembler dump.
0x00000000004011a8	6	    cout << a << endl;
No symbol "rax" in current context.
A syntax error in expression, near `%rax'.
A syntax error in expression, near `%rsi'.
7	    cout << &a << endl;
Reading symbols from array...
Breakpoint 1 at 0x40118a: file array.cpp, line 5.
The program is not being run.
The program is not being run.
Starting program: /home/wujing/code/cpp-learning/array/array 

Breakpoint 1, main () at array.cpp:5
5	    int a[6] = {1, 2, 3, 4, 5, '\0'};
Reading symbols from array...
Breakpoint 1 at 0x40118a: file array.cpp, line 5.
Starting program: /home/wujing/code/cpp-learning/array/array 

Breakpoint 1, main () at array.cpp:5
5	    int a[6] = {1, 2, 3, 4, 5, '\0'};
6	    cout << a << endl;
$1 = {
  [0] = 1,
  [1] = 2,
  [2] = 3,
  [3] = 4,
  [4] = 5,
  [5] = 0
}
$2 = 1
$3 = (int (*)[6]) 0x7fffffffc680
$4 = 1
$5 = 1
$6 = 2
$7 = 3
$8 = (int *) 0x7fffffffc684
$9 = (int *) 0x7fffffffc684
$10 = 24
No symbol "len" in current context.
No symbol "length" in current context.
Attempt to extract a component of a value that is not a struct or union
$11 = 4
$12 = 1
Reading symbols from array...
Breakpoint 1 at 0x40118a: file array.cpp, line 5.
Starting program: /home/wujing/code/cpp-learning/array/array 

Breakpoint 1, main () at array.cpp:5
5	    int a[6] = {1, 3, 5, 7, 9, '\0'};
6	    cout << a << endl;
$1 = {
  [0] = 1,
  [1] = 3,
  [2] = 5,
  [3] = 7,
  [4] = 9,
  [5] = 0
}
$2 = (int (*)[6]) 0x7fffffffc680
$3 = (int *) 0x7fffffffc680
$4 = 1
$5 = 2
$6 = 3
$7 = 5
$8 = 7
Reading symbols from array2...
Breakpoint 1 at 0x40117a: file array2.cpp, line 5.
The program is not being run.
Starting program: /home/wujing/code/cpp-learning/array/array2 

Breakpoint 1, main () at array2.cpp:5
5	    int a[2][3] = {1, 3, 5, 7, 9, '\0'};
6	    cout << a << endl;
$1 = {
  [0] = {
    [0] = 1,
    [1] = 3,
    [2] = 5
  },
  [1] = {
    [0] = 7,
    [1] = 9,
    [2] = 0
  }
}
$2 = (int (*)[2][3]) 0x7fffffffc670
$3 = {
  [0] = 1,
  [1] = 3,
  [2] = 5
}
$4 = (int (*)[3]) 0x7fffffffc670
$5 = {
  [0] = 1,
  [1] = 3,
  [2] = 5
}
$6 = {
  [0] = 1,
  [1] = 3,
  [2] = 5
}
$7 = {
  [0] = {
    [0] = 1,
    [1] = 3,
    [2] = 5
  },
  [1] = {
    [0] = 7,
    [1] = 9,
    [2] = 0
  }
}
$8 = (int (*)[3]) 0x7fffffffc67c
$9 = {
  [0] = 7,
  [1] = 9,
  [2] = 0
}
$10 = {
  [0] = 0,
  [1] = 0,
  [2] = 4199008
}
$11 = 9
$12 = {
  [0] = 7,
  [1] = 9,
  [2] = 0
}
$13 = (int (*)[3]) 0x7fffffffc67c
$14 = (int (*)[3]) 0x7fffffffc688
$15 = {
  [0] = 0,
  [1] = 0,
  [2] = 4199008
}
$16 = {
  [0] = {
    [0] = 1,
    [1] = 3,
    [2] = 5
  },
  [1] = {
    [0] = 7,
    [1] = 9,
    [2] = 0
  }
}
$17 = {
  [0] = 1,
  [1] = 3,
  [2] = 5
}
$18 = (int *) 0x7fffffffc674
$19 = 3
$20 = 1
$21 = 3
$22 = 5
$23 = 7
$24 = 9
$25 = 0
$26 = (int (*)[3]) 0x7fffffffc688
$27 = {
  [0] = 0,
  [1] = 0,
  [2] = 4199008
}
$28 = 9
$29 = 0
$30 = (int *) 0x7fffffffc680
$31 = (int *) 0x7fffffffc680
$32 = 9
Reading symbols from ./array2...
Breakpoint 1 at 0x40117a: file array2.cpp, line 5.
Starting program: /home/wujing/code/cpp-learning/array/array2 

Breakpoint 1, main () at array2.cpp:5
5	    int a[2][3] = {1, 3, 5, 7, 9, '\0'};
$1 = {
  [0] = {
    [0] = 4199008,
    [1] = 0,
    [2] = 4198544
  },
  [1] = {
    [0] = 0,
    [1] = -14480,
    [2] = 32767
  }
}
$2 = (int (*)[3]) 0x7fffffffc67c
$3 = (int (*)[3]) 0x7fffffffc670
$4 = 12
$5 = {
  [0] = {
    [0] = 4199008,
    [1] = 0,
    [2] = 4198544
  },
  [1] = {
    [0] = 0,
    [1] = -14480,
    [2] = 32767
  }
}
$6 = (int (*)[2][3]) 0x7fffffffc670
$7 = {
  [0] = {
    [0] = 4199008,
    [1] = 0,
    [2] = 4198544
  },
  [1] = {
    [0] = 0,
    [1] = -14480,
    [2] = 32767
  }
}
Reading symbols from ./array2...
(No debugging symbols found in ./array2)
Reading symbols from ./array2...
Breakpoint 1 at 0x40112a: file array2.cpp, line 4.
Starting program: /home/wujing/code/cpp-learning/array/array2 

Breakpoint 1, main () at array2.cpp:4
4	    int a[3][4] = {{0, 1, 2, 3}, {4, 5, 6, 7}, {8, 9, 10, 11}};
5	    int(*p)[4] = a;
6	    printf("%d\n", sizeof(*(p + 1)));
$1 = {
  [0] = {
    [0] = 0,
    [1] = 1,
    [2] = 2,
    [3] = 3
  },
  [1] = {
    [0] = 4,
    [1] = 5,
    [2] = 6,
    [3] = 7
  },
  [2] = {
    [0] = 8,
    [1] = 9,
    [2] = 10,
    [3] = 11
  }
}
$2 = {
  [0] = {
    [0] = 0,
    [1] = 1,
    [2] = 2,
    [3] = 3
  },
  [1] = {
    [0] = 4,
    [1] = 5,
    [2] = 6,
    [3] = 7
  },
  [2] = {
    [0] = 8,
    [1] = 9,
    [2] = 10,
    [3] = 11
  }
}
$3 = 16
type = int [3][4]
type = int (*)[4]
